@use "base";

.authButton {
  &.dimensions {
    border-radius: base.$auth-button-border-radius;
  }
  &.effects {
    @include base.ease-in-out(base.$button-hover-time);
  }
  &.styles {
    background-color: base.$button-red !important;
    font-size: 1.5rem;
    &:hover {
      background-color: darken(
        $color: base.$button-red,
        $amount: base.$darken-amount
      ) !important;
    }
  }
}

.playButton {
  &.dimensions {
    @include base.circle-setup(base.$play-button-diameter);
    overflow: hidden;
  }
  &.styles {
    background: base.$play-button-background;
  }
  .playIcon {
    width: 100%;
    height: 100%;
  }
}

$enlargeOnHover: 10px;

.bookmark {
  @include base.flexCenter;

  &.position {
    z-index: 19;
    &:hover {
      $posTranslate: (
          base.$bookmark-button-diameter + base.$bookmark-button-hover-enlarge -
            base.$bookmark-button-diameter
        ) / 2;
      transform: translate($posTranslate, -$posTranslate);
    }
  }
  &.dimensions {
    @include base.circle-setup(base.$bookmark-button-diameter);
    &:hover {
      @include base.circle-setup(
        base.$bookmark-button-diameter + base.$bookmark-button-hover-enlarge
      );
    }
  }
  &.effects {
    transition: ease-in-out, 0.35s;
  }
  &.styles {
    background: base.$play-button-background;
    &:hover {
      background: transparentize($color: rgb(0, 0, 0), $amount: 0.6);
    }
  }
  .bookmarkIcon {
    height: 90%;
    width: 90%;
  }
  .bookmarkChecked {
    stroke: base.$bookmark-button-checked-color;
  }
}

// Modal Component
.modalBackdrop {
  &.position {
    position: fixed;
    @include base.topLeft;
    z-index: 99;
  }
  &.dimensions {
    width: 100vw;
    height: 100vh;
  }
  &.styles {
    background: rgba(0, 0, 0, 0.5);
  }
}
.modalWindow {
  overflow: hidden;
  &.position {
    position: fixed;
    z-index: 100;
    top: 50%;
    left: 50%;
    transform: translate(-50%, -50%);
  }

  &.dimensions {
    border-radius: 0.5rem;
    width: 80%;
    max-width: 400px;
    height: 25rem;
    @media screen and (max-width: base.$phone-breakpoint) {
      width: 100%;
      min-width: 300px;
    }
  }
}

// Logout Window Component
.logout {
  @include base.flexCenter;

  &.position {
    @include base.absCenterXY();
    margin: auto;
  }
  &.dimensions {
    width: base.$logout-window-width;
    height: base.$logout-window-height;
    border-radius: 0.5rem;
  }
  &.styles {
    background: base.$secondary-color;
    color: white;
  }

  .button {
    &.dimensions {
      border-radius: 0.5rem;
      width: base.$logout-button-width;
      height: base.$logout-button-height;
    }
    &.styles {
      font-size: 2rem;
      background: base.$button-red;
      color: base.$text-color;
      &:hover {
        background-color: darken(
          $color: base.$button-red,
          $amount: base.$darken-amount
        ) !important;
      }
    }
  }
}
